---
import Search from "@/components/Search.astro";
import ThemeToggle from "@/components/ThemeToggle.astro";
import { menuLinks } from "@/site.config";
import { siteConfig } from "../../site.config";
import { _quotes } from "@/data/quotes";
---

<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link href="https://fonts.googleapis.com/css2?family=VT323&display=swap" rel="stylesheet" />

<header class="group relative mb-16 flex items-center sm:ps-18" id="main-header">
	<div class="flex items-center gap-x-4 sm:flex-row sm:items-center sm:gap-x-7">
		<a
			aria-current={Astro.url.pathname === "/" ? "page" : false}
			class="inline-flex flex-shrink-0 items-center grayscale hover:filter-none sm:relative"
			href="/"
		>
			<img
				class="border-accent/20 h-16 w-16 rounded-full border sm:h-25 sm:w-25"
				src="/icon.png"
				alt={siteConfig.title}
				width="80"
				height="80"
				loading="lazy"
			/>
		</a>
		<div class="flex flex-col">
			<a href="/">
				<span class="text-xl font-bold sm:text-2xl">{siteConfig.title}</span>
			</a>
			<nav
				aria-label="Main menu"
				class="bg-global-bg/85 text-accent sm:divide-accent absolute -inset-x-4 top-14 hidden flex-col items-end gap-y-4 rounded-md py-4 shadow backdrop-blur-sm group-[.menu-open]:z-50 group-[.menu-open]:flex sm:static sm:z-auto sm:-ms-4 sm:mt-1 sm:flex sm:flex-row sm:items-center sm:divide-x sm:rounded-none sm:bg-transparent sm:py-0 sm:shadow-none sm:backdrop-blur-none"
				id="navigation-menu"
			>
				{
					menuLinks.map((link) => (
						<a
							aria-current={Astro.url.pathname === link.path ? "page" : false}
							class="px-4 py-4 underline-offset-2 hover:underline sm:py-0"
							href={link.path}
						>
							{link.title}
						</a>
					))
				}
			</nav>
		</div>
		<Search />
		<ThemeToggle />
		<mobile-button>
			<button
				aria-expanded="false"
				aria-haspopup="menu"
				class="group relative ms-4 h-7 w-7 sm:invisible sm:hidden"
				id="toggle-navigation-menu"
				type="button"
			>
				<span class="sr-only">Open main menu</span>
				<svg
					aria-hidden="true"
					class="absolute start-1/2 top-1/2 h-full w-full -translate-x-1/2 -translate-y-1/2 transition-all group-aria-expanded:scale-0 group-aria-expanded:opacity-0"
					fill="none"
					focusable="false"
					id="line-svg"
					stroke="currentColor"
					stroke-width="1.5"
					viewBox="0 0 24 24"
					xmlns="http://www.w3.org/2000/svg"
				>
					<path d="M3.75 9h16.5m-16.5 6.75h16.5" stroke-linecap="round" stroke-linejoin="round"
					></path>
				</svg>
				<svg
					aria-hidden="true"
					class="text-accent absolute start-1/2 top-1/2 h-full w-full -translate-x-1/2 -translate-y-1/2 scale-0 opacity-0 transition-all group-aria-expanded:scale-100 group-aria-expanded:opacity-100"
					class="text-accent"
					fill="none"
					focusable="false"
					id="cross-svg"
					stroke="currentColor"
					stroke-width="1.5"
					viewBox="0 0 24 24"
					xmlns="http://www.w3.org/2000/svg"
				>
					<path d="M6 18L18 6M6 6l12 12" stroke-linecap="round" stroke-linejoin="round"></path>
				</svg>
			</button>
		</mobile-button>
	</div>
	<div
		class="animate-pulse-font absolute right-20 -bottom-2 hidden translate-x-1/2 -translate-y-1/2 -rotate-24 text-lg sm:block"
		id="splash"
	>
	</div>

	<script>
		import { toggleClass } from "@/utils/domElement";

		class MobileNavBtn extends HTMLElement {
			#menuOpen: boolean = false;

			connectedCallback() {
				const headerEl = document.getElementById("main-header")!;
				const mobileButtonEl = this.querySelector<HTMLButtonElement>("button");

				mobileButtonEl?.addEventListener("click", () => {
					if (headerEl) toggleClass(headerEl, "menu-open");
					this.#menuOpen = !this.#menuOpen;
					mobileButtonEl.setAttribute("aria-expanded", this.#menuOpen.toString());
				});
			}
		}

		customElements.define("mobile-button", MobileNavBtn);
	</script>
	<script define:vars={{ _quotes }}>
		const quoteElement = document.getElementById("splash");
		if (quoteElement) {
			const quotes = JSON.parse(
				new TextDecoder().decode(Uint8Array.from(atob(_quotes), (c) => c.charCodeAt(0))),
			);
			const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];
			quoteElement.textContent = randomQuote;

			if (/[\u4e00-\u9fa5]/.test(randomQuote)) {
				quoteElement.classList.remove("text-lg");
				quoteElement.classList.add("text-xs");
			}
		}
	</script>
</header>

<style>
	@keyframes pulse-font {
		50% {
			transform: scale(1.1);
		}
	}
	.animate-pulse-font {
		animation: pulse-font 0.7s ease-in-out 50;
		will-change: transform;
		font-family: "VT323", monospace;
	}
</style>
